<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>优先级倒置</title>
      <link href="/blog/2021/12/16/%E4%BC%98%E5%85%88%E7%BA%A7%E5%80%92%E7%BD%AE/"/>
      <url>/blog/2021/12/16/%E4%BC%98%E5%85%88%E7%BA%A7%E5%80%92%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程中的优先级倒置"><a href="#多线程中的优先级倒置" class="headerlink" title="多线程中的优先级倒置"></a>多线程中的优先级倒置</h1><p>优先级倒置是指一个低优先级线程能阻止一个高优先级线程的执行—它是调度和同步之间的一个不干净的相互作用结果。调度规则要求一个线程运行，但是同步要求运行另一个线程，所以两个线程的优先级好像被倒置了。</p><h3 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h3><p>当一个低优先级线程获得一个共享的资源（如：互斥量), 并且被一个随后在同样资源上阻塞的高优先级线程抢占时，优先级倒置发生。当只有两个线程时，低优先级线程然后将被允许执行，最后释放互斥量。然而，如果在它们之间有第三个线程准备好时，它能阻止低优先级线程运行，因为低优先级线程拥有高优先级线程需要的互斥量，中间优先级线程也就阻止了高优先级线程的执行。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>POSIX多线程程序设.pdf</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCD-基本数据结构</title>
      <link href="/blog/2021/12/16/GCD-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/blog/2021/12/16/GCD-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="source-code-URL"><a href="#source-code-URL" class="headerlink" title="source code URL"></a>source code URL</h2><p><a href="https://github.com/apple/swift-corelibs-libdispatch/tree/macosforge/libdispatch-200">https://github.com/apple/swift-corelibs-libdispatch/tree/macosforge/libdispatch-200</a></p><h2 id="库的编码规范"><a href="#库的编码规范" class="headerlink" title="库的编码规范"></a>库的编码规范</h2><p>1.xx_s 带_s后缀都是struct, 带xx_t后缀都是xx_s的指针类型定义：typedef xx_s xx_t;<br>2.dou 基本代表dispatch object union<br>3.DISPATCH_STRUCT_HEADER 宏就是dispatch_object 基类字段<br>4.DISPATCH_VTABLE_HEADER 宏用来定义虚函数表<br>5.posix pthread API带后缀_np表示not portable. <a href="radar::https://stackoverflow.com/questions/2238564/pthread-functions-np-suffix">radar::https://stackoverflow.com/questions/2238564/pthread-functions-np-suffix</a></p><h3 id="dispatch-object-s-in-object-internal-h"><a href="#dispatch-object-s-in-object-internal-h" class="headerlink" title="dispatch_object_s in object_internal.h"></a>dispatch_object_s in object_internal.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//dispatch_object_t 类型是一个uion 用过来模拟根类（dispatch_object_t），其中__attribute__((transparent_union)) 让编译器，不做强类型检查</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token operator">*</span>_do<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_continuation_s</span> <span class="token operator">*</span>_dc<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span>_dq<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span> <span class="token operator">*</span>_dqa<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_group_s</span> <span class="token operator">*</span>_dg<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_source_s</span> <span class="token operator">*</span>_ds<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_source_attr_s</span> <span class="token operator">*</span>_dsa<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_s</span> <span class="token operator">*</span>_dsema<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_data_s</span> <span class="token operator">*</span>_ddata<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_io_s</span> <span class="token operator">*</span>_dchannel<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_operation_s</span> <span class="token operator">*</span>_doperation<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_disk_s</span> <span class="token operator">*</span>_ddisk<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">dispatch_object_t</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>transparent_union<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DISPATCH_VTABLE_HEADER</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> do_type<span class="token punctuation">;</span> \ </span></span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> do_kind<span class="token punctuation">;</span> \<span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_debug<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_invoke<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_dispose<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DISPATCH_STRUCT_HEADER</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">y</span> <span class="token operator">*</span>do_vtable<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_ref_cnt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_xref_cnt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_suspend_cnt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span>do_targetq<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> <span class="token operator">*</span>do_ctxt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> <span class="token operator">*</span>do_finalizer<span class="token punctuation">;</span></span></span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_vtable_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_VTABLE_HEADER</span><span class="token punctuation">(</span>dispatch_object_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_STRUCT_HEADER</span><span class="token punctuation">(</span>dispatch_object_s<span class="token punctuation">,</span> dispatch_object_vtable_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">///宏展开</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_vtable_s</span> <span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> do_type<span class="token punctuation">;</span><span class="token comment">//例如：DISPATCH_QUEUE_TYPE</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> do_kind<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_debug<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_invoke<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_dispose<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_object_vtable_s</span> <span class="token operator">*</span>do_vtable<span class="token punctuation">;</span><span class="token comment">//类似C++虚函数表</span>    <span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span><span class="token comment">//volatile 关键字设计CPU高速缓冲</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_ref_cnt<span class="token punctuation">;</span><span class="token comment">//库内部使用的内存管理</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_xref_cnt<span class="token punctuation">;</span><span class="token comment">//使用库的程序员使用的内存管理external references 看_dispatch_release</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_suspend_cnt<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span>do_targetq<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>do_ctxt<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>do_finalizer<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//涉及根类对象的一些方法 in object.c</span><span class="token class-name">size_t</span><span class="token function">_dispatch_object_debug_attr</span><span class="token punctuation">(</span><span class="token class-name">dispatch_object_t</span> dou<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bufsiz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//dou 是一个union对象,其中_do是 dispatch_object_s *</span><span class="token keyword">return</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> bufsiz<span class="token punctuation">,</span> <span class="token string">"xrefcnt = 0x%x, refcnt = 0x%x, "</span><span class="token string">"suspend_cnt = 0x%x, locked = %d, "</span><span class="token punctuation">,</span> dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_xref_cnt<span class="token punctuation">,</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_ref_cnt<span class="token punctuation">,</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_suspend_cnt <span class="token operator">/</span> DISPATCH_OBJECT_SUSPEND_INTERVAL<span class="token punctuation">,</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_suspend_cnt <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPATCH_OBJECT_GLOBAL_REFCNT</span><span class="token expression"><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0u</span><span class="token punctuation">)</span> </span><span class="token comment">//dispatch global objct 引用计数unsigned int max</span></span><span class="token comment">//**不带下划线的方法都是外部使用，我们平时使用的,涉及的do_xref_cnt.有下划线的是库内部使用的内存管理，涉及do_ref_cnt</span><span class="token keyword">void</span><span class="token function">dispatch_retain</span><span class="token punctuation">(</span><span class="token class-name">dispatch_object_t</span> dou<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_xref_cnt <span class="token operator">==</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// global object</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">dispatch_atomic_inc2o</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">,</span> do_xref_cnt<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_CLIENT_CRASH</span><span class="token punctuation">(</span><span class="token string">"Resurrection of an object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//库内部使用</span><span class="token keyword">void</span><span class="token function">_dispatch_retain</span><span class="token punctuation">(</span><span class="token class-name">dispatch_object_t</span> dou<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_ref_cnt <span class="token operator">==</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// global object</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">dispatch_atomic_inc2o</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">,</span> do_ref_cnt<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_CLIENT_CRASH</span><span class="token punctuation">(</span><span class="token string">"Resurrection of an object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__LP64__</span></span><span class="token comment">// the bottom nibble must not be zero, the rest of the bits should be random</span><span class="token comment">// we sign extend the 64-bit version so that a better instruction encoding is</span><span class="token comment">// generated on Intel</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPATCH_OBJECT_LISTLESS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xffffffff89abcdef</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPATCH_OBJECT_LISTLESS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x89abcdef</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">void</span><span class="token function">dispatch_release</span><span class="token punctuation">(</span><span class="token class-name">dispatch_object_t</span> dou<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_xref_cnt <span class="token operator">==</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xref_cnt <span class="token operator">=</span> <span class="token function">dispatch_atomic_dec2o</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">,</span> do_xref_cnt<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fastpath</span><span class="token punctuation">(</span>xref_cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fastpath</span><span class="token punctuation">(</span>xref_cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如何外部内存管理引用计数为0，需要去确认内部引用计数。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_vtable <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_dispatch_source_kevent_vtable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">_dispatch_source_xref_release</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_ds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span><span class="token function">DISPATCH_OBJECT_SUSPENDED</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Arguments for and against this assert are within 6705399</span><span class="token function">DISPATCH_CLIENT_CRASH</span><span class="token punctuation">(</span><span class="token string">"Release of a suspended object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">_dispatch_release</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">DISPATCH_CLIENT_CRASH</span><span class="token punctuation">(</span><span class="token string">"Over-release of an object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token function">_dispatch_release</span><span class="token punctuation">(</span><span class="token class-name">dispatch_object_t</span> dou<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_ref_cnt <span class="token operator">==</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// global object</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ref_cnt <span class="token operator">=</span> <span class="token function">dispatch_atomic_dec2o</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">,</span> do_ref_cnt<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fastpath</span><span class="token punctuation">(</span>ref_cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fastpath</span><span class="token punctuation">(</span>ref_cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_next <span class="token operator">!=</span> DISPATCH_OBJECT_LISTLESS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_CRASH</span><span class="token punctuation">(</span><span class="token string">"release while enqueued"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_xref_cnt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_CRASH</span><span class="token punctuation">(</span><span class="token string">"release while external references exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">dx_dispose</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#define dx_dispose(x) (x)->do_vtable->do_dispose(x)</span><span class="token punctuation">&#125;</span><span class="token function">DISPATCH_CRASH</span><span class="token punctuation">(</span><span class="token string">"over-release"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token function">_dispatch_dispose</span><span class="token punctuation">(</span><span class="token class-name">dispatch_object_t</span> dou<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">dispatch_queue_t</span> tq <span class="token operator">=</span> dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_targetq<span class="token punctuation">;</span><span class="token class-name">dispatch_function_t</span> func <span class="token operator">=</span> dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_finalizer<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>ctxt <span class="token operator">=</span> dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_ctxt<span class="token punctuation">;</span>dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_vtable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x200</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>func <span class="token operator">&amp;&amp;</span> ctxt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">dispatch_async_f</span><span class="token punctuation">(</span>tq<span class="token punctuation">,</span> ctxt<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_dispatch_release</span><span class="token punctuation">(</span>tq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//**</span><span class="token comment">///还没看明白</span><span class="token comment">// 6618342 Contact the team that owns the Instrument DTrace probe before</span><span class="token comment">//         renaming this symbol</span><span class="token class-name">dispatch_queue_t</span><span class="token function">_dispatch_wakeup</span><span class="token punctuation">(</span><span class="token class-name">dispatch_object_t</span> dou<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">dispatch_queue_t</span> tq<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span><span class="token function">DISPATCH_OBJECT_SUSPENDED</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dx_probe</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dou<span class="token punctuation">.</span>_dq<span class="token operator">-></span>dq_items_tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// _dispatch_source_invoke() relies on this testing the whole suspend count</span><span class="token comment">// word, not just the lock bit. In other words, no point taking the lock</span><span class="token comment">// if the source is suspended or canceled.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dispatch_atomic_cmpxchg2o</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">,</span> do_suspend_cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_COCOA_COMPAT</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_dq <span class="token operator">==</span> <span class="token operator">&amp;</span>_dispatch_main_q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">_dispatch_queue_wakeup_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">_dispatch_retain</span><span class="token punctuation">(</span>dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span><span class="token punctuation">;</span>tq <span class="token operator">=</span> dou<span class="token punctuation">.</span>_do<span class="token operator">-></span>do_targetq<span class="token punctuation">;</span><span class="token function">_dispatch_queue_push</span><span class="token punctuation">(</span>tq<span class="token punctuation">,</span> dou<span class="token punctuation">.</span>_do<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> tq<span class="token punctuation">;</span><span class="token comment">// libdispatch does not need this, but the Instrument DTrace</span><span class="token comment">// probe does</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dispatch-queue-s-in-queue-internal-h"><a href="#dispatch-queue-s-in-queue-internal-h" class="headerlink" title="dispatch_queue_s in queue_internal.h"></a>dispatch_queue_s in queue_internal.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">dispatch_continuation_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_CONTINUATION_HEADER</span><span class="token punctuation">(</span>dispatch_continuation_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">dispatch_group_t</span> dc_group<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>dc_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_continuation_s</span> <span class="token operator">*</span><span class="token class-name">dispatch_continuation_t</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_vtable_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_VTABLE_HEADER</span><span class="token punctuation">(</span>dispatch_queue_attr_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_STRUCT_HEADER</span><span class="token punctuation">(</span>dispatch_queue_attr_s<span class="token punctuation">,</span> dispatch_queue_attr_vtable_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_vtable_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_VTABLE_HEADER</span><span class="token punctuation">(</span>dispatch_queue_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_STRUCT_HEADER</span><span class="token punctuation">(</span>dispatch_queue_s<span class="token punctuation">,</span> dispatch_queue_vtable_s<span class="token punctuation">)</span><span class="token punctuation">;</span>DISPATCH_QUEUE_HEADER<span class="token punctuation">;</span><span class="token keyword">char</span> dq_label<span class="token punctuation">[</span>DISPATCH_QUEUE_MIN_LABEL_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// must be last</span><span class="token keyword">char</span> _dq_pad<span class="token punctuation">[</span>DISPATCH_QUEUE_CACHELINE_PAD<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// for static queues only</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//宏展开</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DISPATCH_CONTINUATION_HEADER</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>do_vtable<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token class-name">dispatch_function_t</span> dc_func<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> <span class="token operator">*</span>dc_ctxt</span></span><span class="token keyword">struct</span> <span class="token class-name">dispatch_continuation_s</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//可以发现continuation对象居然没有引用计数</span>    <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>do_vtable<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dispatch_continuation_s</span><span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span>    <span class="token comment">//typedef void (*dispatch_function_t)(void *) in base.h</span>    <span class="token class-name">dispatch_function_t</span> dc_func<span class="token punctuation">;</span><span class="token comment">//可以利用C函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span>dc_ctxt<span class="token class-name">dispatch_group_t</span> dc_group<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>dc_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_continuation_s</span> <span class="token operator">*</span><span class="token class-name">dispatch_continuation_t</span><span class="token punctuation">;</span><span class="token comment">//可以发现编程</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DISPATCH_VTABLE_HEADER</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> do_type<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> do_kind<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_debug<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_invoke<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_dispose<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_vtable_s</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> do_type<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> do_kind<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_debug<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_invoke<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_dispose<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_vtable_s</span><span class="token operator">*</span> do_vtable<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_ref_cnt<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_xref_cnt<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_suspend_cnt<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span>do_targetq<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>do_ctxt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>do_finalizer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_vtable_s</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> do_type<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> do_kind<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_debug<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_invoke<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> do_dispose<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//例如：</span><span class="token comment">// const struct dispatch_queue_vtable_s _dispatch_queue_vtable = &#123;</span><span class="token comment">// .do_type = DISPATCH_QUEUE_TYPE,</span><span class="token comment">// .do_kind = "queue",</span><span class="token comment">// .do_dispose = _dispatch_queue_dispose,</span><span class="token comment">// .do_invoke = NULL,</span><span class="token comment">// .do_probe = (void *)dummy_function_r0,</span><span class="token comment">// .do_debug = dispatch_queue_debug,</span><span class="token comment">// &#125;;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPATCH_QUEUE_HEADER</span> <span class="token punctuation">\</span><span class="token expression"><span class="token class-name">uint32_t</span> <span class="token keyword">volatile</span> dq_running<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token class-name">uint32_t</span> dq_width<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> dq_items_tail<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> dq_items_head<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> dq_serialnum<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token class-name">dispatch_queue_t</span> dq_specific_q<span class="token punctuation">;</span></span></span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//dispatch_object 字段</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_vtable_s</span><span class="token operator">*</span> do_vtable<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_ref_cnt<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_xref_cnt<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_suspend_cnt<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span>do_targetq<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>do_ctxt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>do_finalizer<span class="token punctuation">;</span>    <span class="token comment">//queue 特有字段</span>    <span class="token class-name">uint32_t</span> <span class="token keyword">volatile</span> dq_running<span class="token punctuation">;</span><span class="token class-name">uint32_t</span> dq_width<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> dq_items_tail<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_object_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> dq_items_head<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> dq_serialnum<span class="token punctuation">;</span><span class="token class-name">dispatch_queue_t</span> dq_specific_q<span class="token punctuation">;</span><span class="token keyword">char</span> dq_label<span class="token punctuation">[</span>DISPATCH_QUEUE_MIN_LABEL_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// must be last</span><span class="token keyword">char</span> _dq_pad<span class="token punctuation">[</span>DISPATCH_QUEUE_CACHELINE_PAD<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// for static queues only</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> _dispatch_mgr_q<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_attr_vtable_s</span> dispatch_queue_attr_vtable<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_vtable_s</span> _dispatch_queue_vtable<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> _dispatch_queue_serial_numbers<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> _dispatch_root_queues<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPATCH_QUEUE_PRIORITY_COUNT</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISPATCH_ROOT_QUEUE_COUNT</span> <span class="token expression"><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_COUNT <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span><span class="token comment">// overcommit priority index values need bit 1 set</span><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">,</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">,</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">,</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">,</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">,</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">,</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>DISPATCH_ALWAYS_INLINE DISPATCH_CONST<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">dispatch_queue_t</span><span class="token function">_dispatch_get_root_queue</span><span class="token punctuation">(</span><span class="token keyword">long</span> priority<span class="token punctuation">,</span> bool overcommit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>overcommit<span class="token punctuation">)</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_LOW<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_DEFAULT<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_HIGH<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_BACKGROUND<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_LOW<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_DEFAULT<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_HIGH<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> DISPATCH_QUEUE_PRIORITY_BACKGROUND<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Note to later developers: ensure that any initialization changes are</span><span class="token comment">// made for statically allocated queues (i.e. _dispatch_main_q).</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token function">_dispatch_queue_init</span><span class="token punctuation">(</span><span class="token class-name">dispatch_queue_t</span> dq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dq<span class="token operator">-></span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_vtable<span class="token punctuation">;</span>dq<span class="token operator">-></span>do_next <span class="token operator">=</span> DISPATCH_OBJECT_LISTLESS<span class="token punctuation">;</span>dq<span class="token operator">-></span>do_ref_cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>dq<span class="token operator">-></span>do_xref_cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// Default target queue is overcommit!</span>dq<span class="token operator">-></span>do_targetq <span class="token operator">=</span> <span class="token function">_dispatch_get_root_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//low_overcommit</span>dq<span class="token operator">-></span>dq_running <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>dq<span class="token operator">-></span>dq_width <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>dq<span class="token operator">-></span>dq_serialnum <span class="token operator">=</span> <span class="token function">dispatch_atomic_inc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_dispatch_queue_serial_numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dispatch-semaphore-in-semaphore-internal-h"><a href="#dispatch-semaphore-in-semaphore-internal-h" class="headerlink" title="dispatch semaphore in semaphore_internal.h"></a>dispatch semaphore in semaphore_internal.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">dispatch_sema_notify_s</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_sema_notify_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> dsn_next<span class="token punctuation">;</span><span class="token class-name">dispatch_queue_t</span> dsn_queue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>dsn_ctxt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>dsn_func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_s</span> <span class="token punctuation">&#123;</span><span class="token function">DISPATCH_STRUCT_HEADER</span><span class="token punctuation">(</span>dispatch_semaphore_s<span class="token punctuation">,</span> dispatch_semaphore_vtable_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> dsema_value<span class="token punctuation">;</span><span class="token keyword">long</span> dsema_orig<span class="token punctuation">;</span><span class="token class-name">size_t</span> dsema_sent_ksignals<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_MACH_SEM <span class="token operator">&amp;&amp;</span> USE_POSIX_SEM</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">"Too many supported semaphore types"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">USE_MACH_SEM</span></span><span class="token class-name">semaphore_t</span> dsema_port<span class="token punctuation">;</span><span class="token class-name">semaphore_t</span> dsema_waiter_port<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">USE_POSIX_SEM</span></span><span class="token class-name">sem_t</span> dsema_sem<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">"No supported semaphore type"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token class-name">size_t</span> dsema_group_waiters<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_sema_notify_s</span> <span class="token operator">*</span>dsema_notify_head<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_sema_notify_s</span> <span class="token operator">*</span>dsema_notify_tail<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_vtable_s</span> _dispatch_semaphore_vtable<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token class-name">uintptr_t</span> _dispatch_thread_semaphore_t<span class="token punctuation">;</span>_dispatch_thread_semaphore_t <span class="token function">_dispatch_get_thread_semaphore</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_dispatch_put_thread_semaphore</span><span class="token punctuation">(</span>_dispatch_thread_semaphore_t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_dispatch_thread_semaphore_wait</span><span class="token punctuation">(</span>_dispatch_thread_semaphore_t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_dispatch_thread_semaphore_signal</span><span class="token punctuation">(</span>_dispatch_thread_semaphore_t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_dispatch_thread_semaphore_dispose</span><span class="token punctuation">(</span>_dispatch_thread_semaphore_t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//宏展开</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DISPATCH_STRUCT_HEADER</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">y</span> <span class="token operator">*</span>do_vtable<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">x</span> <span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_ref_cnt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_xref_cnt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_suspend_cnt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span>do_targetq<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> <span class="token operator">*</span>do_ctxt<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> <span class="token operator">*</span>do_finalizer<span class="token punctuation">;</span></span></span><span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_s</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_vtable_s</span> <span class="token operator">*</span>do_vtable<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_s</span> <span class="token operator">*</span><span class="token keyword">volatile</span> do_next<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_ref_cnt<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_xref_cnt<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_suspend_cnt<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> <span class="token operator">*</span>do_targetq<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>do_ctxt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>do_finalizer<span class="token punctuation">;</span><span class="token keyword">long</span> dsema_value<span class="token punctuation">;</span><span class="token keyword">long</span> dsema_orig<span class="token punctuation">;</span><span class="token class-name">size_t</span> dsema_sent_ksignals<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_MACH_SEM <span class="token operator">&amp;&amp;</span> USE_POSIX_SEM</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">"Too many supported semaphore types"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">USE_MACH_SEM</span></span><span class="token class-name">semaphore_t</span> dsema_port<span class="token punctuation">;</span><span class="token class-name">semaphore_t</span> dsema_waiter_port<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">USE_POSIX_SEM</span></span><span class="token class-name">sem_t</span> dsema_sem<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">"No supported semaphore type"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token class-name">size_t</span> dsema_group_waiters<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_sema_notify_s</span> <span class="token operator">*</span>dsema_notify_head<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_sema_notify_s</span> <span class="token operator">*</span>dsema_notify_tail<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="global-queue-in-queue-c"><a href="#global-queue-in-queue-c" class="headerlink" title="global queue in queue.c"></a>global queue in queue.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/***主要数据结构：**1. struct dispatch_queue_s _dispatch_root_queues[]**2. static struct dispatch_root_queue_context_s _dispatch_root_queue_contexts[]**3. static struct dispatch_semaphore_s _dispatch_thread_mediator[]*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_PTHREAD_WORKQUEUES</span></span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> _dispatch_root_queue_wq_priorities<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> WORKQ_LOW_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> WORKQ_LOW_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> WORKQ_DEFAULT_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span>WORKQ_DEFAULT_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> WORKQ_HIGH_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> WORKQ_HIGH_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> WORKQ_BG_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span>WORKQ_BG_PRIOQUEUE<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_vtable_s</span> _dispatch_semaphore_vtable <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_type <span class="token operator">=</span> DISPATCH_SEMAPHORE_TYPE<span class="token punctuation">,</span><span class="token punctuation">.</span>do_kind <span class="token operator">=</span> <span class="token string">"semaphore"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>do_dispose <span class="token operator">=</span> _dispatch_semaphore_dispose<span class="token punctuation">,</span><span class="token punctuation">.</span>do_debug <span class="token operator">=</span> _dispatch_semaphore_debug<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//in semaphore.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token comment">//mediator 有解决纷争的人意思，就是利用semaphore进行同步调节</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_semaphore_s</span> _dispatch_thread_mediator<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_semaphore_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_THREAD_COUNT</span> <span class="token expression"><span class="token number">255</span></span></span><span class="token keyword">struct</span> <span class="token class-name">dispatch_root_queue_context_s</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_PTHREAD_WORKQUEUES</span></span><span class="token class-name">pthread_workqueue_t</span> dgq_kworkqueue<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token class-name">uint32_t</span> dgq_pending<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token class-name">uint32_t</span> dgq_thread_pool_size<span class="token punctuation">;</span><span class="token class-name">dispatch_semaphore_t</span> dgq_thread_mediator<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">dispatch_root_queue_context_s</span> _dispatch_root_queue_contexts<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">.</span>dgq_thread_mediator <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span> MAX_THREAD_COUNT<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//这里是global queue</span><span class="token operator">/</span> <span class="token number">6618342</span> Contact the team that owns the Instrument DTrace probe before<span class="token comment">//         renaming this symbol</span><span class="token comment">// dq_running is set to 2 so that barrier operations go through the slow path</span>DISPATCH_CACHELINE_ALIGN<span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> _dispatch_root_queues<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.low-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_LOW_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.low-overcommit-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.default-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.default-overcommit-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.high-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.high-overcommit-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.background-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_root_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ctxt <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_BACKGROUND_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.root.background-overcommit-priority"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> UINT32_MAX<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 6618342 Contact the team that owns the Instrument DTrace probe before</span><span class="token comment">//         renaming this symbol</span>DISPATCH_CACHELINE_ALIGN<span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> _dispatch_mgr_q <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_mgr_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>do_targetq <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_HIGH_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.libdispatch-manager"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//!!!注意在init.c中定义的</span>DISPATCH_CACHELINE_ALIGN<span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span> _dispatch_main_q <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>DISPATCH_USE_RESOLVERS</span></span><span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_vtable<span class="token punctuation">,</span><span class="token punctuation">.</span>do_targetq <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">.</span>do_ref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_xref_cnt <span class="token operator">=</span> DISPATCH_OBJECT_GLOBAL_REFCNT<span class="token punctuation">,</span><span class="token punctuation">.</span>do_suspend_cnt <span class="token operator">=</span> DISPATCH_OBJECT_SUSPEND_LOCK<span class="token punctuation">,</span><span class="token punctuation">.</span>dq_label <span class="token operator">=</span> <span class="token string">"com.apple.main-thread"</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_running <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_width <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span>dq_serialnum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">dispatch_queue_t</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span><span class="token keyword">long</span> priority<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token operator">~</span>DISPATCH_QUEUE_OVERCOMMIT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">_dispatch_get_root_queue</span><span class="token punctuation">(</span>priority<span class="token punctuation">,</span>flags <span class="token operator">&amp;</span> DISPATCH_QUEUE_OVERCOMMIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">dispatch_queue_t</span><span class="token function">dispatch_get_current_queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">_dispatch_queue_get_current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token function">_dispatch_get_root_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//queue init函数入口</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">_dispatch_hw_config_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_dispatch_hw_config<span class="token punctuation">.</span>cc_max_active <span class="token operator">=</span> <span class="token function">_dispatch_get_activecpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>_dispatch_hw_config<span class="token punctuation">.</span>cc_max_logical <span class="token operator">=</span> <span class="token function">_dispatch_get_logicalcpu_max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>_dispatch_hw_config<span class="token punctuation">.</span>cc_max_physical <span class="token operator">=</span> <span class="token function">_dispatch_get_physicalcpu_max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//init workq 是应该是平台特性的，系统pthread内部有queue</span><span class="token keyword">static</span> <span class="token keyword">inline</span> bool<span class="token function">_dispatch_root_queues_init_workq</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bool result <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_PTHREAD_WORKQUEUES</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">slowpath</span><span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LIBDISPATCH_DISABLE_KWQ"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> i<span class="token punctuation">,</span> r<span class="token punctuation">;</span><span class="token class-name">pthread_workqueue_attr_t</span> pwq_attr<span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">pthread_workqueue_attr_init_np</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwq_attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DISPATCH_ROOT_QUEUE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">pthread_workqueue_t</span> pwq <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> prio <span class="token operator">=</span> _dispatch_root_queue_wq_priorities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">pthread_workqueue_attr_setqueuepriority_np</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwq_attr<span class="token punctuation">,</span> prio<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">pthread_workqueue_attr_setovercommit_np</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwq_attr<span class="token punctuation">,</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">pthread_workqueue_create_np</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pwq_attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> result <span class="token operator">||</span> <span class="token function">dispatch_assume</span><span class="token punctuation">(</span>pwq<span class="token punctuation">)</span><span class="token punctuation">;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dgq_kworkqueue <span class="token operator">=</span> pwq<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> <span class="token function">pthread_workqueue_attr_destroy_np</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwq_attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// HAVE_PTHREAD_WORKQUEUES</span></span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token function">_dispatch_root_queues_init_thread_pool</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DISPATCH_ROOT_QUEUE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TARGET_OS_EMBEDDED</span></span><span class="token comment">// some software hangs if the non-overcommitting queues do not</span><span class="token comment">// overcommit when threads block. Someday, this behavior should apply</span><span class="token comment">// to all platforms</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>_dispatch_root_queue_contexts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dgq_thread_pool_size <span class="token operator">=</span>_dispatch_hw_config<span class="token punctuation">.</span>cc_max_active<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_MACH_SEM</span></span><span class="token comment">// override the default FIFO behavior for the pool semaphores</span><span class="token class-name">kern_return_t</span> kr <span class="token operator">=</span> <span class="token function">semaphore_create</span><span class="token punctuation">(</span><span class="token function">mach_task_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dsema_port<span class="token punctuation">,</span> SYNC_POLICY_LIFO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DISPATCH_VERIFY_MIG</span><span class="token punctuation">(</span>kr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span>kr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume</span><span class="token punctuation">(</span>_dispatch_thread_mediator<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dsema_port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">USE_POSIX_SEM</span></span><span class="token comment">/* XXXRW: POSIX semaphores don't support LIFO? */</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_dispatch_thread_mediator<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dsema_sem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token function">DISPATCH_CRASH</span><span class="token punctuation">(</span><span class="token string">"Thread pool creation failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">_dispatch_root_queues_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>context DISPATCH_UNUSED<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">_dispatch_root_queues_init_workq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这个if确定了queue 由libdispatch提供</span><span class="token function">_dispatch_root_queues_init_thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">countof</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>DISPATCH_EXPORT DISPATCH_NOTHROW<span class="token keyword">void</span><span class="token function">libdispatch_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_COUNT <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span>DISPATCH_ROOT_QUEUE_COUNT <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_LOW <span class="token operator">==</span><span class="token operator">-</span>DISPATCH_QUEUE_PRIORITY_HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span><span class="token function">countof</span><span class="token punctuation">(</span>_dispatch_root_queues<span class="token punctuation">)</span> <span class="token operator">==</span>DISPATCH_ROOT_QUEUE_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span><span class="token function">countof</span><span class="token punctuation">(</span>_dispatch_root_queue_contexts<span class="token punctuation">)</span> <span class="token operator">==</span>DISPATCH_ROOT_QUEUE_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_PTHREAD_WORKQUEUES</span></span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span><span class="token function">countof</span><span class="token punctuation">(</span>_dispatch_root_queue_wq_priorities<span class="token punctuation">)</span> <span class="token operator">==</span>DISPATCH_ROOT_QUEUE_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_ENABLE_THREAD_POOL</span></span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span><span class="token function">countof</span><span class="token punctuation">(</span>_dispatch_thread_mediator<span class="token punctuation">)</span> <span class="token operator">==</span>DISPATCH_ROOT_QUEUE_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_source_s</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span><span class="token punctuation">)</span> <span class="token operator">-</span> DISPATCH_QUEUE_CACHELINE_PAD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_DEBUG</span></span><span class="token function">dispatch_assert</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dispatch_queue_s</span><span class="token punctuation">)</span> <span class="token operator">%</span> DISPATCH_CACHELINE_SIZE<span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token function">_dispatch_thread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dispatch_queue_key<span class="token punctuation">,</span> _dispatch_queue_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_dispatch_thread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dispatch_sema4_key<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>_dispatch_thread_semaphore_dispose<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_dispatch_thread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dispatch_cache_key<span class="token punctuation">,</span> _dispatch_cache_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_dispatch_thread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dispatch_io_key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_dispatch_thread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dispatch_apply_key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_PERF_MON</span></span><span class="token function">_dispatch_thread_key_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dispatch_bcounter_key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_USE_RESOLVERS </span><span class="token comment">// rdar://problem/8541707</span></span>_dispatch_main_q<span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_queue_vtable<span class="token punctuation">;</span>_dispatch_main_q<span class="token punctuation">.</span>do_targetq <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_root_queues<span class="token punctuation">[</span>DISPATCH_ROOT_QUEUE_IDX_DEFAULT_OVERCOMMIT_PRIORITY<span class="token punctuation">]</span><span class="token punctuation">;</span>_dispatch_data_empty<span class="token punctuation">.</span>do_vtable <span class="token operator">=</span> <span class="token operator">&amp;</span>_dispatch_data_vtable<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token function">_dispatch_thread_setspecific</span><span class="token punctuation">(</span>dispatch_queue_key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_dispatch_main_q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DISPATCH_USE_PTHREAD_ATFORK</span></span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">dispatch_assume_zero</span><span class="token punctuation">(</span><span class="token function">pthread_atfork</span><span class="token punctuation">(</span>dispatch_atfork_prepare<span class="token punctuation">,</span>dispatch_atfork_parent<span class="token punctuation">,</span> dispatch_atfork_child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token function">_dispatch_hw_config_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GCD </tag>
            
            <tag> libdispatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 预处理器</title>
      <link href="/blog/2021/09/27/C%20Preprocessor/"/>
      <url>/blog/2021/09/27/C%20Preprocessor/</url>
      
        <content type="html"><![CDATA[<h1 id="C-预处理器"><a href="#C-预处理器" class="headerlink" title="C 预处理器"></a>C 预处理器</h1><p>C 处理器其实也有很多技巧和注意点，我大致看过了所有section，对于某些地方，我还是没有理解，例如tokenization处理流程，我并没看懂。大致翻译了一部分，后面附上官网地址用于以后查阅。希望，后面能逐步理解。</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>C预处理器（命令行 cpp)是一个宏处理器。C编译器会自动调用它来预处理你的程序。C预处理器只用于C、c++和Objective-C源代码。例如，你用它预处理makefile文件，那么所有的tab符都会被移除，从而导致Makefile不能工作。</p><p>话虽如此，你可以在c语言之外的地方使用cpp。其他类似algoli的编程语言通常是安全的(Ada等)。-traditional-cpp模式保留更多的空白，否则更宽容。许多问题可以通过编写C或c++风格的注释而不是本地语言注释来避免，并保持宏的简单性。</p><p>C预处理器在某些细节上有所不同。这本手册讨论了GNU C预处理器，它提供了ISO标准C特性的一个小超集。在它的默认模式下，GNU C预处理器不做标准要求的一些事情。这些特性很少被使用，并且可能会给程序的含义带来意想不到的变化。要获得严格的ISO标准C，您应该使用-std=c90、-std=c99、-std=c11或-std=c17选项，这取决于您想要的标准版本。要获得所有强制诊断，还必须使用-pedantic。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cpp -std&#x3D;c11 -pedantic [input]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CPP 默认使用UTF-8字符集，你可以通过-finput-charset= option 选项进行指定输入文件的字符集。</p><h2 id="初始处理"><a href="#初始处理" class="headerlink" title="初始处理"></a>初始处理</h2><p>CPP 会把输入文件加载到内存，然后按行进行处理。行结束标志<code>CR</code>,<code>CR LF</code>,<code>CR</code>.对于很长的一行可以用’&#39;进行换行处理（连续行），CPP会把以’&#39;结尾的连续行合并回一个很长的行，两个连续行合并中间不会插入空格，可以理解为直接字符串拼接。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">hi</span> <span class="token expression">hello</span><span class="token punctuation">\</span><span class="token expression">world</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>hi <span class="token operator">=</span> <span class="token string">"ni hao"</span><span class="token punctuation">;</span>\\宏hi 会预处理成helloworld，中间不会有空格    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行注释’//‘,块注释’/* comments */‘。</p><h2 id="include-search-path"><a href="#include-search-path" class="headerlink" title="include search path"></a>include search path</h2><p>默认情况下，预处理器查找指令#include “file”的引号形式包含的头文件，首先相对于当前文件的目录，然后在标准系统目录的预配置列表中查找。例如，如果/usr/include/sys/stat.h包含#include “types.h”， GCC首先在/usr/include/sys中查找types.h，然后在它通常的搜索路径中查找。</p><p>对于尖括号形式#include <file>，预处理器的默认行为是只查看标准系统目录。确切的搜索目录列表取决于目标系统、GCC的配置方式以及它的安装位置。通过使用-v选项调用CPP，可以找到CPP版本的默认搜索目录列表. 例如：<code>cpp -v /dev/null -o /dev/null</code></p><p>您可以使用许多命令行选项向搜索路径添加额外的目录。最常用的选项是-Idir，它导致dir在当前目录(指令的引号形式)之后和标准系统目录之前搜索。您可以在命令行上指定多个-I选项，在这种情况下，目录将按照从左到右的顺序搜索。</p><p>如果你需要单独控制’ #include ‘指令的引号和尖括号形式的搜索路径，你可以使用-iquote和/或-isystem选项来代替-I。有关这些选项以及其他一般不太有用的选项的详细描述，请参阅调用。</p><p>如果在命令行中指定其他选项，比如-I，它会影响预处理器搜索头文件的位置，那么-v选项打印的目录列表会反映预处理器使用的实际搜索路径。</p><p>注意，您还可以使用- nodinc选项阻止预处理器搜索任何默认的系统头目录。当编译操作系统内核或其他不使用标准C库工具或标准C库本身的程序时，这是非常有用的。</p><h2 id="函数宏"><a href="#函数宏" class="headerlink" title="函数宏"></a>函数宏</h2><p>您还可以定义一些宏，其使用方式类似于函数调用。这些被称为类函数宏。要定义一个类似函数的宏，你可以使用相同的’ #define ‘指令，但是在宏名称后面马上放一对括号。例如,</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lang_init</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">c_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token function">lang_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     → <span class="token function">c_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数宏只有在名称后跟一对括号时才会展开。如果你只写名字，它就不需要写了。当您有一个同名的函数和一个宏，并且您有时希望使用该函数时，这是非常有用的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">foo</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> </span><span class="token comment">/* optimized inline version */</span></span>…  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  funcptr <span class="token operator">=</span> foo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，对<code>foo()</code>的调用将使用宏，但函数指针将获得实际函数的地址。如果要扩展宏，它将导致语法错误。如果在宏定义中的宏名和圆括号之间加空格，这就不会定义一个类函数宏，而是定义了一个类对象宏，其展开碰巧以一对圆括号开始。</p><h2 id="官网（可以当手册翻阅）"><a href="#官网（可以当手册翻阅）" class="headerlink" title="官网（可以当手册翻阅）"></a>官网（可以当手册翻阅）</h2><p><a href="https://gcc.gnu.org/onlinedocs/cpp/index.html#SEC_Contents">https://gcc.gnu.org/onlinedocs/cpp/index.html#SEC_Contents</a></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> C预处理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ new操作符号的一些探索</title>
      <link href="/blog/2021/09/24/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%8F%B7%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8E%A2%E7%B4%A2/"/>
      <url>/blog/2021/09/24/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%8F%B7%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="new和delete-new-和delete"><a href="#new和delete-new-和delete" class="headerlink" title="new和delete new[]和delete[]"></a>new和delete new[]和delete[]</h1><h2 id="new-和-delete"><a href="#new-和-delete" class="headerlink" title="new 和 delete"></a>new 和 delete</h2><p>在C++中，new和delete是配对使用的。这两个操作符的作用是用来动态分配单个类型的对象。如果new 一个类对象，C++语言会自动插入默认构造函数的调用代码， delete一个类对象，C++语言会自动插入析构函数的调用代码。所以，如果这个类对象有继承关系，析构函数必须实现成虚函数（避免基类对象指针指向子类的时候，调用delete操作，如果析构函数不是虚函数，就只会调用基类的析构函数，子类就无法析构了）。</p><h2 id="new-和-delete-1"><a href="#new-和-delete-1" class="headerlink" title="new[] 和 delete[]"></a>new[] 和 delete[]</h2><p>为什么C++中有个new 和 delete后，为什么还来一对new[] 和 delete[]? 请看下面代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello"</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destruct"</span><span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    A <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> A<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    A <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> A<span class="token punctuation">;</span>    <span class="token comment">// delete a; malloc: *** error for object 0x101009208: pointer being freed was not allocated</span>    <span class="token keyword">delete</span> <span class="token punctuation">(</span>A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 <code>delete a</code>代码执行时候，会奔溃。 调用<code>delete (A*)((uint64_t)a - 8)</code>,可以正常析构数组的第一个A对象，后面99对象没有调用析构函数，只是被底层的free 函数回收了内存。</p><p>在我的x86_64 MAC电脑上，C++在调用new[]操作符号时候，会多分配一个8字节的空间，用来存放数着的size。然后把底层malloc函数返回的指针值加8后返回给我们代码。这样，用户调用 delete[]操作符号时候，会取出size，然后迭代进行析构，再减8字节后调用free释放内存。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写好一个bench_mark工具</title>
      <link href="/blog/2021/09/18/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%B8%AAbench-mark-%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2021/09/18/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%B8%AAbench-mark-%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="bench-mark"><a href="#bench-mark" class="headerlink" title="bench_mark()"></a>bench_mark()</h1><p>如何优雅的实现一个测试代码运行时间的<code>bench_mark</code>函数，talk is cheap, show me your code.</p><h3 id="bench-mark-h"><a href="#bench-mark-h" class="headerlink" title="bench_mark.h"></a>bench_mark.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">bench_mark_ </span><span class="token comment">//guard for #include usage</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">bench_mark_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>    <span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GNUC__</span></span>        <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__format__</span><span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">void</span> <span class="token function">bench_mark</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>task<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>    <span class="token punctuation">&#125;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">bench_mark</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">b <span class="token operator">?</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>header 文件里面，在DEBUG环境下需要说明的是<code>__attribute__((__format__(printf, 2, 3)))</code>.  这个是编译器属性，可以提示编译器去检查<code>(&quot;%s,%d&quot;,&quot;hello&quot;,1)</code>类型匹配问题，同时给出warning.在RELEASE环境下，<code>bench_mark</code>函数会替换成一个宏，做到只执行工程中的代码，这样就剥离了时间测试相关的代码， 做到无入侵。</p><h3 id="bench-mark-m"><a href="#bench-mark-m" class="headerlink" title="bench_mark.m"></a>bench_mark.m</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">"bench_mark.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GNUC__</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">likely</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">__builtin_expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">likely</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">bench_mark</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>task<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>format<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        va_list ap<span class="token punctuation">;</span>        <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">vsprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> format<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        CFAbsoluteTime start <span class="token operator">=</span> <span class="token function">CFAbsoluteTimeGetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CFAbsoluteTime delta <span class="token operator">=</span> <span class="token number">0.f</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">CFAbsoluteTimeGetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"Used time:(%.2lfs)-(%.5lfms) %s"</span><span class="token punctuation">,</span> delta<span class="token punctuation">,</span> delta <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.m文件里面需要说明下，为什么加入likely。在bench_mark的使用场景下，block为nil的概率是零。这样可以充分利用CPU的冒险机制，做到更准的测试task中的运行时间。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">bench_mark(^&#123;    [self logicCode];&#125;, &quot;%s, %s&quot;,&quot;&gt;&gt; as filter key work&quot;, __FILE__);bench_mark(nil,&quot;Hi, boy~&quot;);bench_mark(nil,nil);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><a href="https://github.com/liangxiuchen/bench_mark">https://github.com/liangxiuchen/bench_mark</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些好用的命令和工具</title>
      <link href="/blog/2021/09/18/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2021/09/18/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="工作中能提高效率的命令和工具"><a href="#工作中能提高效率的命令和工具" class="headerlink" title="工作中能提高效率的命令和工具"></a>工作中能提高效率的命令和工具</h1><h2 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h2><p>摘要：too long, don’t read(tldr)</p><p>好用之处：见名知意，在类Unix系统中一个非常重要的命令<code>man</code>，是大家每天工作都离不来的。但是，它所呈现的文档太详细，太长，导致我们无法高效的查询常用的命令。所谓的二八定律，被这个命令很好的诠释。</p><p>用法：tldr [命令]</p><p>官网：<a href="https://tldr.sh/">https://tldr.sh/</a></p><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>摘要：键位映射</p><ol><li>物理键盘上的Cap Lock键位几乎没什么作用，可以在系统设置-&gt;键盘设置中把它映射成CTRL键。</li><li>在.vimrc文件中用CTRL-j 组合来映射成ESC键位。</li></ol><p>这样处理了，就能大大提高Vim 编辑效率了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>野指针</title>
      <link href="/blog/2021/08/20/%E9%87%8E%E6%8C%87%E9%92%88/"/>
      <url>/blog/2021/08/20/%E9%87%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h1><p>各位大佬在日常开发中，相信肯定遇到过野指针的crash。但是在C或者C++中野指针一定会导致奔溃吗？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在堆上，分配一个int类型大的内存空间</span><span class="token keyword">void</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放pi指向的内存。delete 怎么知道需要回收多少内存，我们这里只传入了一个地址而已。</span><span class="token function">free</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//现在pi已经是悬挂的野指针了</span><span class="token keyword">int</span> <span class="token operator">*</span>p_i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pi<span class="token punctuation">;</span><span class="token comment">//写一个野指针</span><span class="token operator">*</span>p_i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//读取一个野指针</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token operator">*</span>p_i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p-%p:%d\n"</span><span class="token punctuation">,</span>pi<span class="token punctuation">,</span> p_i<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码会奔溃吗？小伙伴们可以尝试下。答案是这个case是肯定不会crash。为什么?</p><h2 id="内存访问原理"><a href="#内存访问原理" class="headerlink" title="内存访问原理"></a>内存访问原理</h2><p>首先，我们上层应用程序所得到的都是虚拟内存。当我们使用标准库中的<code>malloc</code>来分配内存的时候，标准库会调用操作系统的一个系统调用接口<code>brk(size_t)</code>，来向操作体系申请堆空间。此时，操作系统会分配一部分虚拟内存空间，并在内核进程记账。所以，当我们<code>free</code>了这块内存，其实仅仅只是像标准库说明了，我们释放了这片内存。这样，标准库可以在下次，重新分配这片内存给别的变量。但是在操作系统看来，这片内存还是被你的应用使用着。所以，当你用<code>*pi_i</code>去读取或者写入，都是合法的。所以，上面代码片段执行都是不会crash的。</p><h2 id="crash的场景"><a href="#crash的场景" class="headerlink" title="crash的场景"></a>crash的场景</h2><ul><li><code>free</code>重复调用。当你第一次调用<code>free</code>, 标准库会记账回收。此时，你再重复释放，标准库就会执行奔溃流程了。</li><li>这片内存别重新分配给了别的变量，然后野指针变量破坏了这部分数据，都可能造成段错误，非法指令等奔溃。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在利用指针的时候，养成释放了内存，对应变量也需要设成<code>nil</code>。 这样即使奔溃了，也好定位。不然的话，野指针能导致的crash有时候真的很难定位。</p>]]></content>
      
      
      <categories>
          
          <category> 内存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>始</title>
      <link href="/blog/2021/08/13/whishStart/"/>
      <url>/blog/2021/08/13/whishStart/</url>
      
        <content type="html"><![CDATA[<h1 id="致谢家人"><a href="#致谢家人" class="headerlink" title="致谢家人"></a>致谢家人</h1><p>已经做iOS开发快5年了，中间有成长也有迷惑。我想这是每一个IT人，只要你是搞技术的，都是需要不断学习。所以博客是最好的笔记本，在这里你可以分享你的认知。同时也是重温和巩固自己所学的。3年之前，我也是搭建过一个博客，但是那个博客我懒懒散散地写了几篇技术文章就没有再去更新过了。</p><p>这次我重构了，博客用来记录我平时的生活和学习。白驹过隙和4年前相比，我现在已经为人夫为人父。在此，我首先感谢我的老婆，为我生了一个那么可爱的儿子，感谢丈母娘辛苦带娃。好了，今天就止于此，博客始于此。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
