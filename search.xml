<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何写好一个bench_mark工具</title>
      <link href="/blog/2021/09/18/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%B8%AAbench-mark-%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2021/09/18/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%B8%AAbench-mark-%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="bench-mark"><a href="#bench-mark" class="headerlink" title="bench_mark()"></a>bench_mark()</h1><p>如何优雅的实现一个测试代码运行时间的<code>bench_mark</code>函数，talk is cheap, show me your code.</p><h3 id="bench-mark-h"><a href="#bench-mark-h" class="headerlink" title="bench_mark.h"></a>bench_mark.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">bench_mark_ </span><span class="token comment">//guard for #include usage</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">bench_mark_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>    <span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GNUC__</span></span>        <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__format__</span><span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">void</span> <span class="token function">bench_mark</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>task<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>    <span class="token punctuation">&#125;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">bench_mark</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">b <span class="token operator">?</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>header 文件里面，在DEBUG环境下需要说明的是<code>__attribute__((__format__(printf, 2, 3)))</code>.  这个是编译器属性，可以提示编译器去检查<code>(&quot;%s,%d&quot;,&quot;hello&quot;,1)</code>类型匹配问题，同时给出warning.在RELEASE环境下，<code>bench_mark</code>函数会替换成一个宏，做到只执行工程中的代码，这样就剥离了时间测试相关的代码， 做到无入侵。</p><h3 id="bench-mark-m"><a href="#bench-mark-m" class="headerlink" title="bench_mark.m"></a>bench_mark.m</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">"bench_mark.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GNUC__</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">likely</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">__builtin_expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">likely</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">bench_mark</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>task<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>format<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        va_list ap<span class="token punctuation">;</span>        <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">vsprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> format<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        CFAbsoluteTime start <span class="token operator">=</span> <span class="token function">CFAbsoluteTimeGetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CFAbsoluteTime delta <span class="token operator">=</span> <span class="token number">0.f</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">CFAbsoluteTimeGetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"Used time:(%.2lfs)-(%.5lfms) %s"</span><span class="token punctuation">,</span> delta<span class="token punctuation">,</span> delta <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.m文件里面需要说明下，为什么加入likely。在bench_mark的使用场景下，block为nil的概率是零。这样可以充分利用CPU的冒险机制，做到更准的测试task中的运行时间。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">bench_mark(^&#123;    [self logicCode];&#125;, &quot;%s, %s&quot;,&quot;&gt;&gt; as filter key work&quot;, __FILE__);bench_mark(nil,&quot;Hi, boy~&quot;);bench_mark(nil,nil);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些好用的命令和工具</title>
      <link href="/blog/2021/09/18/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2021/09/18/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="工作中能提高效率的命令和工具"><a href="#工作中能提高效率的命令和工具" class="headerlink" title="工作中能提高效率的命令和工具"></a>工作中能提高效率的命令和工具</h1><h2 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h2><p>摘要：too long, don’t read(tldr)</p><p>好用之处：见名知意，在类Unix系统中一个非常重要的命令<code>man</code>，是大家每天工作都离不来的。但是，它所呈现的文档太详细，太长，导致我们无法高效的查询常用的命令。所谓的二八定律，被这个命令很好的诠释。</p><p>用法：tldr [命令]</p><p>官网：<a href="https://tldr.sh/">https://tldr.sh/</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>野指针</title>
      <link href="/blog/2021/08/20/%E9%87%8E%E6%8C%87%E9%92%88/"/>
      <url>/blog/2021/08/20/%E9%87%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h1><p>各位大佬在日常开发中，相信肯定遇到过野指针的crash。但是在C或者C++中野指针一定会导致奔溃吗？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在堆上，分配一个int类型大的内存空间</span><span class="token keyword">void</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放pi指向的内存。delete 怎么知道需要回收多少内存，我们这里只传入了一个地址而已。</span><span class="token function">free</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//现在pi已经是悬挂的野指针了</span><span class="token keyword">int</span> <span class="token operator">*</span>p_i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pi<span class="token punctuation">;</span><span class="token comment">//写一个野指针</span><span class="token operator">*</span>p_i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//读取一个野指针</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token operator">*</span>p_i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p-%p:%d\n"</span><span class="token punctuation">,</span>pi<span class="token punctuation">,</span> p_i<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码会奔溃吗？小伙伴们可以尝试下。答案是这个case是肯定不会crash。为什么?</p><h2 id="内存访问原理"><a href="#内存访问原理" class="headerlink" title="内存访问原理"></a>内存访问原理</h2><p>首先，我们上层应用程序所得到的都是虚拟内存。当我们使用标准库中的<code>malloc</code>来分配内存的时候，标准库会调用操作系统的一个系统调用接口<code>brk(size_t)</code>，来向操作体系申请堆空间。此时，操作系统会分配一部分虚拟内存空间，并在内核进程记账。所以，当我们<code>free</code>了这块内存，其实仅仅只是像标准库说明了，我们释放了这片内存。这样，标准库可以在下次，重新分配这片内存给别的变量。但是在操作系统看来，这片内存还是被你的应用使用着。所以，当你用<code>*pi_i</code>去读取或者写入，都是合法的。所以，上面代码片段执行都是不会crash的。</p><h2 id="crash的场景"><a href="#crash的场景" class="headerlink" title="crash的场景"></a>crash的场景</h2><ul><li><code>free</code>重复调用。当你第一次调用<code>free</code>, 标准库会记账回收。此时，你再重复释放，标准库就会执行奔溃流程了。</li><li>这片内存别重新分配给了别的变量，然后野指针变量破坏了这部分数据，都可能造成段错误，非法指令等奔溃。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在利用指针的时候，养成释放了内存，对应变量也需要设成<code>nil</code>。 这样即使奔溃了，也好定位。不然的话，野指针能导致的crash有时候真的很难定位。</p>]]></content>
      
      
      <categories>
          
          <category> 内存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>始</title>
      <link href="/blog/2021/08/13/whishStart/"/>
      <url>/blog/2021/08/13/whishStart/</url>
      
        <content type="html"><![CDATA[<h1 id="致谢家人"><a href="#致谢家人" class="headerlink" title="致谢家人"></a>致谢家人</h1><p>已经做iOS开发快5年了，中间有成长也有迷惑。我想这是每一个IT人，只要你是搞技术的，都是需要不断学习。所以博客是最好的笔记本，在这里你可以分享你的认知。同时也是重温和巩固自己所学的。3年之前，我也是搭建过一个博客，但是那个博客我懒懒散散地写了几篇技术文章就没有再去更新过了。</p><p>这次我重构了，博客用来记录我平时的生活和学习。白驹过隙和4年前相比，我现在已经为人夫为人父。在此，我首先感谢我的老婆，为我生了一个那么可爱的儿子，感谢丈母娘辛苦带娃。好了，今天就止于此，博客始于此。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
